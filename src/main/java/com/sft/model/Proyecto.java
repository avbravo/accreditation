/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.sft.model;

import com.jmoordb.core.annotation.Column;
import com.jmoordb.core.annotation.Embedded;
import com.jmoordb.core.annotation.Entity;
import com.jmoordb.core.annotation.Id;
import com.jmoordb.core.annotation.Referenced;
import com.jmoordb.core.annotation.ViewReferenced;
import com.jmoordb.core.annotation.enumerations.AutogeneratedActive;
import java.util.Date;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author avbravo
 */
@Entity
public class Proyecto {
     
    @Id(autogeneratedActive = AutogeneratedActive.ON)
    private Long idproyecto;
    @Column
    private String proyecto;
    @Column
    private String descripcion;
 @Referenced(from = "Icono", localField = "idicono")
    private Icono icono;
    @Column
    private String prefijo;

    @Column
    private Date fechafinal;
    @Column
    private Date fechainicial;

   
    @ViewReferenced(from = "departament", localField = "iddepartament")
    List<DepartamentView> departamentView;
      
    @Referenced(from = "grupo", localField = "idgrupo")
    private Grupo grupo;

//    @ViewReferenced(from = "user", localField = "iduser")
//    private List<UserView> userView;
   @Embedded
   List<ProyectoMiembro> proyectoMiembro;
  
   
    @ViewReferenced(from = "central", localField = "idcentral")
    private CentralView centralView;
   
    @Column
    private Double avance;

     @Column(commentary = "iniciado,detenido, finalizado")
    private String estado;
    @Column
    private Boolean active;

    public Proyecto() {
    }

    public Proyecto(Long idproyecto, String proyecto, String descripcion, Icono icono, String prefijo, Date fechafinal, Date fechainicial, List<DepartamentView> departamentView, Grupo grupo, List<ProyectoMiembro> proyectoMiembro, CentralView centralView, Double avance, String estado, Boolean active) {
        this.idproyecto = idproyecto;
        this.proyecto = proyecto;
        this.descripcion = descripcion;
        this.icono = icono;
        this.prefijo = prefijo;
        this.fechafinal = fechafinal;
        this.fechainicial = fechainicial;
        this.departamentView = departamentView;
        this.grupo = grupo;
        this.proyectoMiembro = proyectoMiembro;
        this.centralView = centralView;
        this.avance = avance;
        this.estado = estado;
        this.active = active;
    }

    

    public Long getIdproyecto() {
        return idproyecto;
    }

    public void setIdproyecto(Long idproyecto) {
        this.idproyecto = idproyecto;
    }

    public String getProyecto() {
        return proyecto;
    }

    public void setProyecto(String proyecto) {
        this.proyecto = proyecto;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public String getPrefijo() {
        return prefijo;
    }

    public void setPrefijo(String prefijo) {
        this.prefijo = prefijo;
    }

    public Date getFechafinal() {
        return fechafinal;
    }

    public void setFechafinal(Date fechafinal) {
        this.fechafinal = fechafinal;
    }

    public Date getFechainicial() {
        return fechainicial;
    }

    public void setFechainicial(Date fechainicial) {
        this.fechainicial = fechainicial;
    }

    public Icono getIcono() {
        return icono;
    }

    public void setIcono(Icono icono) {
        this.icono = icono;
    }

    


    public List<DepartamentView> getDepartamentView() {
        return departamentView;
    }

    public void setDepartamentView(List<DepartamentView> departamentView) {
        this.departamentView = departamentView;
    }

    public Grupo getGrupo() {
        return grupo;
    }

    public void setGrupo(Grupo grupo) {
        this.grupo = grupo;
    }

    public CentralView getCentralView() {
        return centralView;
    }

    public void setCentralView(CentralView centralView) {
        this.centralView = centralView;
    }

    public Double getAvance() {
        return avance;
    }

    public void setAvance(Double avance) {
        this.avance = avance;
    }

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public List<ProyectoMiembro> getProyectoMiembro() {
        return proyectoMiembro;
    }

    public void setProyectoMiembro(List<ProyectoMiembro> proyectoMiembro) {
        this.proyectoMiembro = proyectoMiembro;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Proyecto{");
        sb.append("idproyecto=").append(idproyecto);
        sb.append(", proyecto=").append(proyecto);
        sb.append(", descripcion=").append(descripcion);
        sb.append(", icono=").append(icono);
        sb.append(", prefijo=").append(prefijo);
        sb.append(", fechafinal=").append(fechafinal);
        sb.append(", fechainicial=").append(fechainicial);
        sb.append(", departamentView=").append(departamentView);
        sb.append(", grupo=").append(grupo);
        sb.append(", proyectoMiembro=").append(proyectoMiembro);
        sb.append(", centralView=").append(centralView);
        sb.append(", avance=").append(avance);
        sb.append(", estado=").append(estado);
        sb.append(", active=").append(active);
        sb.append('}');
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 17 * hash + Objects.hashCode(this.idproyecto);
        hash = 17 * hash + Objects.hashCode(this.proyecto);
        hash = 17 * hash + Objects.hashCode(this.descripcion);
        hash = 17 * hash + Objects.hashCode(this.icono);
        hash = 17 * hash + Objects.hashCode(this.prefijo);
        hash = 17 * hash + Objects.hashCode(this.fechafinal);
        hash = 17 * hash + Objects.hashCode(this.fechainicial);
        hash = 17 * hash + Objects.hashCode(this.departamentView);
        hash = 17 * hash + Objects.hashCode(this.grupo);
        hash = 17 * hash + Objects.hashCode(this.proyectoMiembro);
        hash = 17 * hash + Objects.hashCode(this.centralView);
        hash = 17 * hash + Objects.hashCode(this.avance);
        hash = 17 * hash + Objects.hashCode(this.estado);
        hash = 17 * hash + Objects.hashCode(this.active);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Proyecto other = (Proyecto) obj;
        if (!Objects.equals(this.proyecto, other.proyecto)) {
            return false;
        }
        if (!Objects.equals(this.descripcion, other.descripcion)) {
            return false;
        }
        if (!Objects.equals(this.prefijo, other.prefijo)) {
            return false;
        }
        if (!Objects.equals(this.estado, other.estado)) {
            return false;
        }
        if (!Objects.equals(this.idproyecto, other.idproyecto)) {
            return false;
        }
        if (!Objects.equals(this.icono, other.icono)) {
            return false;
        }
        if (!Objects.equals(this.fechafinal, other.fechafinal)) {
            return false;
        }
        if (!Objects.equals(this.fechainicial, other.fechainicial)) {
            return false;
        }
        if (!Objects.equals(this.departamentView, other.departamentView)) {
            return false;
        }
        if (!Objects.equals(this.grupo, other.grupo)) {
            return false;
        }
        if (!Objects.equals(this.proyectoMiembro, other.proyectoMiembro)) {
            return false;
        }
        if (!Objects.equals(this.centralView, other.centralView)) {
            return false;
        }
        if (!Objects.equals(this.avance, other.avance)) {
            return false;
        }
        return Objects.equals(this.active, other.active);
    }

   
    
    
   
   

  

}
